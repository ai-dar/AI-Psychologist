const express = require("express");
const cors = require("cors");
const path = require("path");
const fs = require("fs");
const { spawn } = require("child_process");

const app = express();
const PORT = process.env.PORT || 3000;

// ‚úÖ CORS —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
const allowedOrigins = [
    "https://ai-psychologist-production-c69a.up.railway.app"
];

app.use(cors({
    origin: (origin, callback) => {
        if (!origin || allowedOrigins.includes(origin)) {
            callback(null, true);
        } else {
            callback(new Error("CORS policy error"));
        }
    },
    methods: ["GET", "POST", "OPTIONS"],
    allowedHeaders: ["Content-Type"],
    credentials: true
}));

// ‚úÖ Preflight-–∑–∞–ø—Ä–æ—Å—ã (–≤–∞–∂–Ω–æ –¥–ª—è CORS)
app.options("*", cors());

app.use(express.json());

const conversationHistory = {};

// ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –∫–∞–∫–æ–π `python` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
spawn("which", ["python"]).stdout.on("data", (data) => {
    console.log("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python:", data.toString().trim());
});

// ‚úÖ –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ (–≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã CORS —Ä–∞–±–æ—Ç–∞–ª)
app.use(express.static(path.join(__dirname, "../client")));

app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "../client/index.html"));
});

// ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞ /ask
app.post("/ask", (req, res) => {
    const userMessage = req.body.message;
    const userIp = req.ip;

    if (!userMessage) {
        console.log("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!");
        return res.status(400).json({ error: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!" });
    }

    console.log("üì© –ó–∞–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", userMessage);

    if (!conversationHistory[userIp]) {
        conversationHistory[userIp] = [];
    }

    conversationHistory[userIp] = conversationHistory[userIp].filter(msg => typeof msg === "object");
    conversationHistory[userIp].push({ text: userMessage, emotion: "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" });

    if (conversationHistory[userIp].length > 5) {
        conversationHistory[userIp].shift();
    }

    console.log("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Python:", JSON.stringify({ messages: conversationHistory[userIp] }, null, 2));

    const pythonScriptPath = path.join(__dirname, "gpt.py");

    if (!fs.existsSync(pythonScriptPath)) {
        console.error("‚ùå –û—à–∏–±–∫–∞: gpt.py –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: gpt.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
    }

    try {
        const pythonProcess = spawn("python", [pythonScriptPath]);

        let responseData = "";

        pythonProcess.stdout.on("data", (data) => {
            responseData += data.toString();
        });

        pythonProcess.stderr.on("data", (data) => {
            console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ Python-—Å–∫—Ä–∏–ø—Ç–µ:", data.toString());
        });

        pythonProcess.on("close", () => {
            try {
                responseData = responseData.trim();
                responseData = responseData.replace(/New g4f version: .*?\| pip install -U g4f\n?/g, "").trim();

                console.log("‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Python:", responseData);

                if (!responseData) {
                    throw new Error("Python –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
                }

                const responseJson = JSON.parse(responseData);

                conversationHistory[userIp][conversationHistory[userIp].length - 1].emotion = responseJson.emotion;
                res.json(responseJson);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON:", error);
                res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT" });
            }
        });

        pythonProcess.stdin.write(JSON.stringify({ messages: conversationHistory[userIp] }) + "\n");
        pythonProcess.stdin.end();
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python-–ø—Ä–æ—Ü–µ—Å—Å–∞:", error);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Python" });
    }
});

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, "0.0.0.0", () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
}).on("error", (err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err.message);
});
